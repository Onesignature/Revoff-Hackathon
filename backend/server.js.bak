const express = require('express');
const dotenv = require('dotenv');
const path = require('path');
const cors = require('cors');
const { errorHandler, notFound } = require('./middleware/errorMiddleware');

// Import routes
const serverRoutes = require('./routes/serverRoutes');
const productRoutes = require('./routes/productRoutes');

// Load environment variables from .env file in root directory
dotenv.config({ path: path.resolve(__dirname, '../.env') });

// Initialize express app
const app = express();

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Basic route for testing
app.get('/', (req, res) => {
  res.json({
    message: 'Welcome to Revoff Backend API',
    status: 'Server is running',
    version: '1.0.0'
  });
});

// Use routes
app.use('/api/server', serverRoutes);
app.use('/api/products', productRoutes);

// For backward compatibility
app.get('/api/health', (req, res) => {
  res.redirect('/api/server/health');
});

app.get('/api/env-test', (req, res) => {
  res.redirect('/api/server/env');
});

// Error handling middleware
app.use(notFound);
app.use(errorHandler);

// Start the server
const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
  console.log(`Server running in ${process.env.NODE_ENV || 'development'} mode on port ${PORT}`);
  console.log('Available endpoints:');
  console.log('- GET / - Welcome message');
  console.log('- GET /api/server/health - Health check');
  console.log('- GET /api/server/env - Environment variables');
  console.log('- GET /api/server/info - Server information');
  console.log('- GET /api/products - Get all products');
  console.log('- GET /api/products/:id - Get product by ID');
  console.log('- POST /api/products - Create a new product');
});

// Import routes
const serverRoutes = require('./routes/serverRoutes');
const productRoutes = require('./routes/productRoutes');

// Use routes
app.use('/api/server', serverRoutes);
app.use('/api/products', productRoutes);

// For backward compatibility
app.get('/api/health', (req, res) => {
  res.redirect('/api/server/health');
});

app.get('/api/env-test', (req, res) => {
  res.redirect('/api/server/env');
});

// Products endpoint (example)
app.get('/api/products', (req, res) => {
  // Sample product data
  const products = [
    {
      id: '1',
      name: 'Smart Car',
      price: 35000,
      description: 'Electric smart car with AI features',
      image: '/Smart.png'
    },
    {
      id: '2',
      name: 'Lamborghini',
      price: 250000,
      description: 'High-performance luxury sports car',
      image: '/lambo.png'
    },
    {
      id: '3',
      name: 'Urus',
      price: 180000,
      description: 'Luxury SUV with outstanding performance',
      image: '/urus.jpg'
    }
  ];
  
  res.json(products);
});

// Error handling middleware
const notFound = (req, res, next) => {
  const error = new Error(`Not Found - ${req.originalUrl}`);
  res.status(404);
  next(error);
};

const errorHandler = (err, req, res, next) => {
  const statusCode = res.statusCode === 200 ? 500 : res.statusCode;
  
  res.status(statusCode);
  res.json({
    message: err.message,
    stack: process.env.NODE_ENV === 'production' ? null : err.stack
  });
};

app.use(notFound);
app.use(errorHandler);

// Start the server
const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
  console.log(`Server running in ${process.env.NODE_ENV || 'development'} mode on port ${PORT}`);
  console.log('Available endpoints:');
  console.log('- GET / - Welcome message');
  console.log('- GET /api/health - Health check');
  console.log('- GET /api/env-test - Environment variables test');
  console.log('- GET /api/products - Get all products');
});
